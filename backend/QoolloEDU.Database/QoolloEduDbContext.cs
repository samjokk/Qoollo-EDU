using Microsoft.EntityFrameworkCore;
using QoolloEDU.Database.models;

namespace QoolloEDU.Database
{
    public class QoolloEduDbContext : DbContext
    {
        public QoolloEduDbContext(DbContextOptions<QoolloEduDbContext> option) : base(option) { }
        
        public DbSet<BaseUser> BaseUser { get; set; }
        public DbSet<Comment> Comment { get; set; }
        public DbSet<Developer> Developer { get; set; }
        public DbSet<DeveloperProject> DeveloperProject { get; set; }
        public DbSet<DeveloperRating> DeveloperRating { get; set; }
        public DbSet<DeveloperTag> DeveloperTag { get; set; }
        public DbSet<Event> Event { get; set; }
        public DbSet<EventRating> EventRating { get; set; }
        public DbSet<EventTag> EventTag { get; set; }
        public DbSet<Link> Link { get; set; }
        public DbSet<MediaContent> MediaContent { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<Organizer> Organizer { get; set; }
        public DbSet<Project> Project { get; set; }
        public DbSet<ProjectRating> ProjectRating { get; set; }
        public DbSet<ProjectTag> ProjectTag { get; set; }
        public DbSet<Request> Request { get; set; }
        public DbSet<RequestTag> RequestTag { get; set; }
        public DbSet<Tag> Tag { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasDefaultSchema("QoolloEDU");
            
            //primary keys
            modelBuilder.Entity<BaseUser>().HasKey(bu => bu.Id);
            modelBuilder.Entity<Comment>().HasKey(c => c.Id);
            modelBuilder.Entity<Developer>().HasKey(d => d.Id);
            modelBuilder.Entity<DeveloperProject>().HasKey(dp => new {dp.DeveloperId, dp.ProjectId});
            modelBuilder.Entity<DeveloperRating>().HasKey(dr => new {dr.DeveloperIdFrom, dr.DeveloperIdTo});
            modelBuilder.Entity<DeveloperTag>().HasKey(dt => new {dt.DeveloperId, dt.TagId});
            modelBuilder.Entity<Event>().HasKey(e => e.Id);
            modelBuilder.Entity<EventRating>().HasKey(er => new {er.DeveloperId, er.EventId});
            modelBuilder.Entity<EventTag>().HasKey(et => new {et.TagId, et.EventId});
            modelBuilder.Entity<Link>().HasKey(l => l.Id);
            modelBuilder.Entity<MediaContent>().HasKey(m => m.Id);
            modelBuilder.Entity<News>().HasKey(n => n.Id);
            modelBuilder.Entity<Organizer>().HasKey(o => o.Id);
            modelBuilder.Entity<Project>().HasKey(p => p.Id);
            modelBuilder.Entity<ProjectRating>().HasKey(pr => new {pr.DeveloperId, pr.ProjectId});
            modelBuilder.Entity<ProjectTag>().HasKey(pt => new {pt.ProjectId, pt.TagId});
            modelBuilder.Entity<Request>().HasKey(r => r.Id);
            modelBuilder.Entity<RequestTag>().HasKey(rt => new {rt.TagId, rt.RequestId});
            modelBuilder.Entity<Tag>().HasKey(t => t.Id);
            
            //unique
            modelBuilder.Entity<BaseUser>().HasIndex(bu => bu.Email).IsUnique();
            modelBuilder.Entity<Developer>().HasIndex(d => d.Nickname).IsUnique();
            modelBuilder.Entity<Developer>().HasIndex(d => d.UserId).IsUnique();
            modelBuilder.Entity<Event>().HasIndex(e => e.Name).IsUnique();
            modelBuilder.Entity<Organizer>().HasIndex(o => o.UserId).IsUnique();
            modelBuilder.Entity<Project>().HasIndex(p => p.Name).IsUnique();
            modelBuilder.Entity<Tag>().HasIndex(t => t.Name).IsUnique();
            
            //autogenerated
            modelBuilder.Entity<BaseUser>()
                .Property(bu => bu.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Comment>()
                .Property(c => c.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Developer>()
                .Property(d => d.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Event>()
                .Property(e => e.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Link>()
                .Property(l => l.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<MediaContent>()
                .Property(mc => mc.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<News>()
                .Property(n => n.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Organizer>()
                .Property(o => o.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Project>()
                .Property(p => p.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Request>()
                .Property(r => r.Id)
                .ValueGeneratedOnAdd();
            modelBuilder.Entity<Tag>()
                .Property(t => t.Id)
                .ValueGeneratedOnAdd();
            
            //relations
            //BaseUser
            modelBuilder.Entity<BaseUser>()
                .HasOne(bu=>bu.Developer)
                .WithOne(d => d.BaseUser)
                .HasForeignKey<Developer>(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<BaseUser>()
                .HasOne(bu => bu.Organizer)
                .WithOne(o => o.BaseUser)
                .HasForeignKey<Organizer>(o => o.UserId)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<BaseUser>()
                .HasMany(bu => bu.Links)
                .WithOne(l => l.BaseUser)
                .OnDelete(DeleteBehavior.Cascade);

            //developer
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.DeveloperRatings)
                .WithOne(dr => dr.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.Comments)
                .WithOne(c => c.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.DeveloperTags)
                .WithOne(dt => dt.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.ProjectRatings)
                .WithOne(pr => pr.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.Requests)
                .WithOne(r => r.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.DeveloperProjects)
                .WithOne(dp => dp.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Developer>()
                .HasMany(d => d.EventRatings)
                .WithOne(er => er.Developer)
                .OnDelete(DeleteBehavior.Cascade);
            
            //tag
            modelBuilder.Entity<Tag>()
                .HasMany(t => t.DeveloperTags)
                .WithOne(dt => dt.Tag)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Tag>()
                .HasMany(t => t.ProjectTags)
                .WithOne(pt => pt.Tag)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Tag>()
                .HasMany(t => t.EventTags)
                .WithOne(et => et.Tag)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Tag>()
                .HasMany(t => t.RequestTags)
                .WithOne(rt => rt.Tag)
                .OnDelete(DeleteBehavior.Cascade);
            
            //project
            modelBuilder.Entity<Project>()
                .HasMany(p => p.DeveloperProjects)
                .WithOne(dp => dp.Project)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Project>()
                .HasMany(p => p.ProjectRatings)
                .WithOne(pr => pr.Project)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Project>()
                .HasMany(p => p.ProjectTags)
                .WithOne(pt => pt.Project)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Project>()
                .HasMany(p => p.News)
                .WithOne(n => n.Project)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Project>()
                .HasMany(p => p.MediaContents)
                .WithOne(m => m.Project)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Project>()
                .HasMany(p => p.Requests)
                .WithOne(r => r.Project)
                .OnDelete(DeleteBehavior.Cascade);
            
            //event
            modelBuilder.Entity<Event>()
                .HasMany(e => e.EventTags)
                .WithOne(et => et.Event)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Event>()
                .HasMany(e => e.Projects)
                .WithOne(p => p.Event)
                .OnDelete(DeleteBehavior.Cascade);
            modelBuilder.Entity<Event>()
                .HasMany(e => e.EventRatings)
                .WithOne(er => er.Event)
                .OnDelete(DeleteBehavior.Cascade);
            
            //news
            modelBuilder.Entity<News>()
                .HasMany(n => n.Comments)
                .WithOne(c => c.News)
                .OnDelete(DeleteBehavior.Cascade);
            
            //request
            modelBuilder.Entity<Request>()
                .HasMany(r => r.RequestTags)
                .WithOne(rt => rt.Request)
                .OnDelete(DeleteBehavior.Cascade);
        }
    }
}